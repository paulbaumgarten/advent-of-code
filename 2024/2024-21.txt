import math, random, numpy, os, re, copy, time

EX = """029A
980A
179A
456A
379A""".splitlines()

REAL = """973A
836A
780A
985A
413A""".splitlines()

### Today's problem

class NumericKeypad:
    def __init__(self):
        self.pos = "A"
        self.y = 3
        self.x = 2
        self.grid = [["7","8","9"],
                     ["4","5","6"],
                     ["1","2","3"],
                     [False,"0","A"]]
        self.sequence = []
    
    def find(self, val):
        for y in range(len(self.grid)):
            for x in range(len(self.grid[y])):
                if self.grid[y][x] == val:
                    return [y,x]
    
    def move_to(self, val):
        y,x = self.find(val)
        if y > self.y: # Move horizontal first, then vertical
            if x > self.x:
                self.sequence = self.sequence + [">" * (x-self.x)]
            else:
                self.sequence = self.sequence + ["<" * (self.x-x)]
            if y > self.y:
                self.sequence = self.sequence + ["v" * (y-self.y)]
            else:
                self.sequence = self.sequence + ["^" * (self.y-y)]
        else: # Move vertical first, then horizontal
            if y > self.y:
                self.sequence = self.sequence + ["v" * (y-self.y)]
            else:
                self.sequence = self.sequence + ["^" * (self.y-y)]
            if x > self.x:
                self.sequence = self.sequence + [">" * (x-self.x)]
            else:
                self.sequence = self.sequence + ["<" * (self.x-x)]
        self.sequence.append("A")
        self.y = y
        self.x = x
        self.pos = val
    
    def get_sequence(self):
        return "".join(self.sequence)


# ^A^^<<A>>AvvvA

#  -  ^  A
#  <  v  >

# <A >A <A A v<A A >>^A vA A ^A v<A A A >^A
# <A >A <A A <vA A ^>>A vA A ^A <vA A A ^>A - my generated

# <<vA^>>AvA^A<<vA^>>AA<<vA>A^>AA<A>vAA^A<vA^>AA<A>A<<vA>A^>AAA<A>vA^A

# v<A<A>>^A
# v<<A>A>^A

class DirectionalKeypad:
    def __init__(self):
        self.pos = "A"
        self.y = 0
        self.x = 2
        self.sequence = []
        self.grid = [[False,"^","A"],
                     ["<","v",">"]]

    def find(self, val):
        for y in range(len(self.grid)):
            for x in range(len(self.grid[y])):
                if self.grid[y][x] == val:
                    return [y,x]
    
    def move_to(self, val):
        if self.pos == "A":
            if val == "A": return ["A"]
            if val == "<": return ["v<<A","<v<A"]
            if val == "^": return ["<A"]
            if val == "v": return ["v<A","<vA"]
            if val == ">": return ["vA"]
        if self.pos == "<":
            if val == "A": return [">>^A",">^>A"]
            if val == "<": return ["A"]
            if val == "^": return [">^A"]
            if val == "v": return [">A"]
            if val == ">": return [">>A"]
        if self.pos == "v":
            if val == "A": return ["^>A",">^A"]
            if val == "<": return ["<A"]
            if val == "^": return ["^A"]
            if val == "v": return ["A"]
            if val == ">": return [">A"]
        if self.pos == ">":
            if val == "A": return ["^A"]
            if val == "<": return ["<<A"]
            if val == "^": return ["^<A","<^A"]
            if val == "v": return ["<A"]
            if val == ">": return ["A"]
        if self.pos == "^":
            if val == "A": return [">A"]
            if val == "<": return ["v<A"]
            if val == "^": return ["A"]
            if val == "v": return ["vA"]
            if val == ">": return ["v>A",">vA"]
        self.pos = val
        
    def move_to2(self, val):
        y,x = self.find(val)
        if y < self.y: # Move horizontal first, then vertical
            if x > self.x:
                self.sequence = self.sequence + [">" * (x-self.x)]
            else:
                self.sequence = self.sequence + ["<" * (self.x-x)]
            if y > self.y:
                self.sequence = self.sequence + ["v" * (y-self.y)]
            else:
                self.sequence = self.sequence + ["^" * (self.y-y)]
        else: # Move vertical first, then horizontal
            if y > self.y:
                self.sequence = self.sequence + ["v" * (y-self.y)]
            else:
                self.sequence = self.sequence + ["^" * (self.y-y)]
            if x > self.x:
                self.sequence = self.sequence + [">" * (x-self.x)]
            else:
                self.sequence = self.sequence + ["<" * (self.x-x)]
        self.sequence.append("A")
        self.y = y
        self.x = x
        self.pos = val

    def get_sequence(self):
        return "".join(self.sequence)


def part1():
    data = EX[:]
    total = 0
    for i in range(len(data)):
        print(data[i])

        num_keypad = NumericKeypad()
        for j in range(len(data[i])):
            instr = data[i][j]
            num_keypad.move_to(instr)
        seq1 = num_keypad.get_sequence()
        print(seq1)

        dir_keypad1 = DirectionalKeypad()
        for j in range(len(seq1)):
            instr = seq1[j]
            dir_keypad1.move_to(instr)
        seq2 = dir_keypad1.get_sequence()
        print(seq2)

        dir_keypad2 = DirectionalKeypad()
        for j in range(len(seq2)):
            instr = seq2[j]
            dir_keypad2.move_to(instr)
        seq3 = dir_keypad2.get_sequence()
        print(seq3)
        complexity = int(data[i].replace("A","")) * len(seq3)
        print(len(seq3),int(data[i].replace("A","")),complexity)
        total += complexity
        print()
    return total

"""

029A
<A^A^^>AvvvA
v<<A>>^A<A>A<AAv>A^Av<AAA>^A
v<A<AA>>^AvAA<^A>Av<<A>>^AvA^Av<<A>>^AAv<A>A^A<A>Av<A<A>>^AAAvA<^A>A

029A
<A^A>^^AvvvA
v<<A>>^A<A>AvA<^AA>A<vAAA>^A
<vA<AA>>^AvAA<^A>A<v<A>>^AvA^A<vA>^A<v<A>^A>AAvA^A<v<A>A>^AAAvA<^A>A


379A: 
<v<A >>^A vA ^A <vA <A A >>^A    AvA<^A>AAvA^A<vA>^AA<A>A<v<A>A>^AAAvA<^A>A - answer
v<<A >>^A vA ^A v<<A >>^A A v<A<A>>^AAvAA<^A>Av<A>^AA<A>Av<A<A>>^AAAvA<^A>A - generated

"""
#  -  ^  A
#  <  v  >

# <A>Av<<A
# <A>A<AA

def part2():
    pass

if __name__=="__main__":
    start = time.time()
    result = part1()
    print(f"Part 1 result:",result)
    result = part2()
    print("Part 2 result:",result)
    finish = time.time()
    print(f"Time taken: {(finish-start):.2f} seconds")


